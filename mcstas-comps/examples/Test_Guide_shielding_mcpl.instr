/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument:  Test_Guide_leaks_mcpl
*
* %Identification
* Written by: Inti Abbate (intiabbate@gmail.com)
* Date: 2022
* Origin: Balseiro Institute
*
* Test instrument for recording neutron leaks and photon generation in guides as MCPL
*
* %Description
* This instrument has a synthetic Maxwell source followed by a neutron guide, modeled
* with Guide_leaks_mcpl component. During neutron propagation through the guide, neutron
* leakage is recorded in a MCPL file. Furthermore, photon generated by absorptions in
* the supermirror, according to the correlations given by R. Kolevatov et al. in
* https://doi.org/10.1016/j.nima.2018.12.069, are recorded in another MCPL file.
*
* Neutrons reaching the guide exit are also recorded in a MCPL file using a
* Virtual_mcpl_output component.
*
* The generated particle lists can be used to perform a shielding calculation around
* the guide system, using any MCPL compatible Monte Carlo code, such as MCNP, PHITS, etc.
*
* In a real problem, the source would usually be a surface source particle list,
* modeled in McStas with a Virtual_mcpl_input.
*
* 
* Example: 
*
*  "mcstas Test_Guide_leaks_mcpl.instr" gives: Test_Guide_leaks_mcpl.c
*  "gcc -o runme.out Test_Guide_leaks_mcpl.c -lm" gives: runme.out
*  "./runme.out" runs the simulation example
*
* %Parameters
*
* %End
*******************************************************************************/

/* Change name of instrument and input parameters with default values */
DEFINE INSTRUMENT Test_Guide_leaks_mcpl()

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
  AT  (0, 0, 0) ABSOLUTE

/* the source ================================================================ */
COMPONENT sa = Source_Maxwell_3( /* flux in n/s/cm2/st/AA */
  Lmin=1, Lmax=11, dist=1, focus_xw=0.1, focus_yh=0.1,
  xwidth=0.01, yheight=0.01,
  T1=216.8,I1=1.24e+13,T2=33.9,I2=1.02e+13, T3=16.7 ,I3=3.0423e+12
)
AT (0,0,0) ABSOLUTE

/* Guide component to record neutron leaks and photon generation ============= */
COMPONENT guide = Guide_leaks_mcpl(
    pt="n", filename_trans="neutron_leaks", filename_abs="photon_generation",
    xwidth=10, yheight=10, length=1000.0, rcurv=10000.0,
    R0=0.99, Qc=0.0219, alpha=4.0, m=3.0, W=0.003
    // merge_mpi=merge
)
AT (0, 0, 0.1) RELATIVE Origin

/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END





